001
Подкючать скрипт нужно в конце перед закрывающим тегом body, это делается для того что бы избежать ошибки. Но не всегда обязаетльно.

Браузер исполняет код сначала в head и есле в нем будет подключен большой файл скрипт, то body он начнет загружать только после того как прочитает скрипт, на это может понадобится много времени и страница для пользователя програжаться не будет.

************************

003
Имя переменноый может состоять из букв, цифр, сивола $ и нижнего подчеркивания и первый символ никогда не должен быть цифрой. Нельязя еще использовать именна слвоа которые зарезервированы в языке - error, promt, alert и тд.

Чаще всего имена переменным присваивают в стиле кэмлкейс myFirtsName.

Объявление переменных:
let - можем поменять значение переменноый
const - не можем поменять
var - такое объявление использовали раньше. Большим минусом является то что вызвать такую переменную можно до ее объявления.

let и const видны в пределах фигурных скобок. Var виден и за пределами фигурных скобок.

let и const не поддерживают старые браузеры. Что бы проверить какие именно браузере не поддерживают можно воспользоваться сайтом caniuse.com Через этот сайт можно проверить все элементы на поддержку того или иного браузера.

Для того что бы поддерживали старые бразуеры можно использовать let и const но для этого нужно использовать специальные технолигии автоматического перевода стандарта.

"use strict"; директива, которая говорит о том, что мы используем современный строгий режим. Это нужно писать в начале одельного файла или функции или в самом главном файле, что не прописывать в каждом отдельном. Это позволяет избавится от неточностей в коде. Например если создать переменную без ключевого слова let или const, будет выдана ошибка.

************************

004
Стили написания кода:
camelCase
snake_case
UPPER_SNAKE_CASE
Kebab-case
PascalCase

************************

005
Есть 8 типов данных, которые делятся на простые и объекты.
Простые: числа, строки, boolen(true/false), null (не существует), undefind (существует но значения нет), Symbol и Bigint (отображает большие числа).

Объектры делятся на специльные объекты: массивы, функции, объект дата, регулярные выражения, ошибки и обычные объекты.

************************

006
Разница между массивами и объектами в том, что у каждого свои методы.

************************

007
alert, prompt, confirm
Если в коносоле отобразить тип данных null, через команду typeof, то вернется ответ что это object. Это ошибка javascript.

************************

008
Интерполяция это когда вставляется переменная внутри строки. Используются косые ковычки `${nameVar}`

************************

009
++ оператор инкремента
-- оператор диинкремента
Если эти операторы стоят перед значением ++i то форма записи называется префиксной. Елси после значения i-- постфиксной.
console.log(++10) будет 11
console.log(10++) будет 10, оператор стоит после цифры, поэтому будет выводится 10, разница работы префикса и постфикса

= - присваевание
== - сравнение
=== - строгое сравнение

&& - и
|| - или
! - оператор отрицания, !false будет true и наоборот

У операторов есть приоритет выполнения. Есть специальная таблица этих приоритетов.

************************

010
Git система контроля (создания) версий
GitHup удаленное хранилище репозиторий

************************

014
Условие if. Тернарный оператор. Тернарный называется потому что учавствуют три аргумента. Swich.

************************

015
Логические оператор и(&&) или(||) не(!).

************************

016
Циклы while, do, for

************************

019
Функции. Переменные объявленные внтури функции действуют только внутри функции. Называются такие переменный локальными. Замыкание функции - это сама функция со всеми переменными, которые ей доступны. Другими словами елси функция не находит переменную у себя внутри, она начинает искать ее среди глобальных переменных.

Все что идет после return никогда не выполняется.

функция declaration. Ее можно вызвать до ее написания (объявления), т.е. выше по коду.
функция expression. Можно вызвать только после объявления.
стрелочная функция. Она была добавлена es6

************************

021
Внутри функции цикл и условие. Функция всегда что то возвращает. Если даже она ничего не выполняет, то возвращает undefind. Например conslot.log('11'). Это другими словами метод log функции console. Оно отоброизит 11, но вернет все равно undefind. Это легко проверить, набрать этот код в консоли браузера. И если в функции не прописано rerutn, она тоже возвращает undefind

************************

022
Методы и свойства строк и чисел. Методы это вспомогательные функции, а свойства это вспомогательные значения.

************************

024
Метод trim(). Удаляет пробельные сивмолы с начала и конца строки.

************************

025
callback функция - фукнция которая должна быть выполнена после того как другая функция завершила сове выполнение. Другими словами это фукнция позоляет нам быть уверенными в том что определенный код не начнет свое выполнение, пока другой код не завержит свое исполнение. 

************************

026
Метод FOR IN. Как подсчитать количество свойств в объкте. Диструктуризация объекта - это т.е. как достучаться к свойствам внутренних объектов в объекте. Диструктуировать это значить разедлить целое на более мелькие кусочки. 

************************

027
Методы массивов. Метод FOR OF. Метод forEach позволяет тоже перебрать все элементы массива. Метод .length (длина массива, сколько элементов) работает по следующемму прицнипу - он видит какой порядковый номер у последнего элемента массива и увеличивает это значенине на единицу. Методы split, join, sort. Все методы это функции. Promt не срабатывает внутри vsc потому что эта команда сужществует только в браузере.

Псевдообъект это такой объект структура которого совпадает со структурой массива, но без возможности использования всех методов. Эта структура, которая просто хранит данные.

************************

029
Когда мы работаем с примитивными типами данных, то они передеются по значению a = 5. b = a + 5 = 10. Не примитивные передеются по ссылке. 

Копирование объектов. Есть глубокая и поверхностная копия. При поверхностном скопируются толко свойства на первом уровне. А что будет глубже будет передаваться через ссылку. Поверхностное копирование через метод Object.assign.

Копирование массивов. Поверхностное копирование массива через метод slice и оператор разворота spread (...)

Копирование объекта с помощью оператора разворота spread (...) 

************************

030
JS Объективно-ориентированный язык программирования. Главным является объект. Любые конструкции прототипно наследуются от объектов. Прототипность это простыми словами способность наследовать свойства от главного объекта (прототипа).

JS можно назвать протатипно-ориентированным языком, это частный случай ООП, один из его стилей.

*************************

031
Debug - отладка кода средствами браузера.

*************************

032
Динамическая типизация это возможность одного типа данных превращаться в другой.
0, '', null, underfined, Nan; - это всегда false, все осатльное true. Пустые массивы, объекты тоже true.
Примеры изменения типа данных.

**************************

033
В каждой выполняемой функции, блока кода и скрипта есть связанные с ними внутренние , т.е. скрытый от нас, объекты, который называется лексическое окружение. Есть внутренние лексическое окружение и внешнее.

Замыкание функции - это сама функция со всеми переменными, которые ей доступны. Другими словами елси функция не находит переменную у себя внутри, она начинает искать ее среди глобальных переменных.
По другому замыкание это функция, которая запоменает свои внешние переменные и может получить к ним доступ.

Каждый вызов функции это создание нового лексического окружения с своими локальными переменными и параметрами.

************************

035
Задачки с собеседований

************************

036
DOM - docoment object modul - объектная модель документа. Методы которые позволяют взаимодействовать со страницей для того что бы получить элементы в js.


************************

039
Событие это сигнал от браузера о том, что что то произошло (клик, двойной клик, наведение мыши на элемент, прокрутка колесика).
Что бы использовать любое событие мы должны назначить обработчик события. Обработчик это функция, которая срабатывает как только событие произошло.
Метод addEventListener добавляет обработчик событий.
Метод removeEventListener удаляет обработчик событий.

Всплытие событий - это когда событие сначала сработало на вложенном элемента, а затем на родительском элементе. Выполнение идет по иерархии вверх по дереву.
 








************************
************************

Рефакторинг - переписывание кода под новые условия и задачи.

Если браузере в консоле при выполнеии например какая ниубдь функция возвращается undefind, это значит что функция ничего не возвращает, нету ключевого слово return, это нормально. Возможно она обрабатывает какие то данные и все.