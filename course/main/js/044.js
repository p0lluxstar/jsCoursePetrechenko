"use strict";

/*
Как можно поместить скрипт на страницу

defer 
<script defer src="js/script.js"></script> defer - этот атрибут сообщает браузеру что он должен продолжать обрабатывать страницу и загружать скрипт в фоновом режиме, а затем запустить скрипт когда он загузится.
Скрипты с defer никогда не блокируют страницу и скриты с таким атрибутом всегда выполняются когда наш дом дерево уже готово. Скрипты с таким атрибутом загружаются последовательно, один за другим.

async
<script async src="js/script.js"></script> async не ждет ансихронных скриптов, содержимое просто обрабатывается и отображается. Так же события document.addEventListener('DOMContentLoaded') и ансихронные скрипты не ждут друг друга, т.е. такие скрипты загружаются в фоновом режиме но при этом запускается сразу как только был загружен, в отличии от defer, он вообще никого не ждет, нет последовательной загрузки. Defer скрипты не ждут загрузку других скриптов, а други скрипты не ждут загрузку defer скриптов.
Когда используем скрыты async мы дожны быть точно уверены, что этот скрипт не зависит от dom структруы, ему все равно сформировалась она или нет и еще он не должен быть зависем от других скриптов.

Еще варинт как добавить скрит это через переменную в другом скрите 
*/

const p = document.querySelectorAll('p');
console.log(p);

// const script = document.createElement('script'); // подключение скрипта через переменную
// script.src = 'js/test.js';
// // script.async = 'false'; если расскоментировать, то test.js будет подключен как обычный скрипт на страничку
// document.body.append(script);

function loadScript(src) { // функция через которую подключаются скрипты на страничку, будут подсключаться последовательно
    const script = document.createElement('script'); // подключение скрипта через переменную
    script.src = 'js/test.js';
    document.body.append(script);
}

loadScript('js/test.js');
loadScript('js/test2.js'); 